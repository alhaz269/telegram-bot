import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Configuration - Convert admin IDs to integers
TOKEN = "7889573217:AAHjCIc2mWoEG4podoHuvoQ1qtXM1BJhWZ8"
ADMINS = [7209247941]  # Keep as is but note this is a large number
FILENAME = "usernames.txt"

# Load usernames from file
def load_usernames():
    if not os.path.exists(FILENAME):
        return []
    with open(FILENAME, "r") as f:
        return [line.strip() for line in f if line.strip()]

# Save usernames to file
def save_usernames(usernames):
    with open(FILENAME, "w") as f:
        for username in usernames:
            f.write(f"{username}\n")

# Initialize global usernames list
USERNAMES = load_usernames()

# Admin check decorator
def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMINS:
            response_text = "‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§"
            if update.message:
                await update.message.reply_text(response_text)
            elif update.callback_query:
                await update.callback_query.answer(response_text, show_alert=True)
            return
        await func(update, context)
    return wrapper

# Main menu handler
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü", callback_data="show_list")],
        [InlineKeyboardButton("‚ûï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó", callback_data="add_user")],
        [InlineKeyboardButton("‚ûñ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", callback_data="remove_user")],
        [InlineKeyboardButton("üóëÔ∏è ‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", callback_data="remove_all")],
        [InlineKeyboardButton("üí¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú", callback_data="send_message")]
    ]
    
    if update.message:
        await update.message.reply_text(
            "‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# Command handlers
@admin_only
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

@admin_only
async def add_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "‚ùå ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /add babu123"
        )
        return

    username = context.args[0].lstrip("@")
    
    # Allow usernames with letters, numbers, and underscores
    if not all(c.isalnum() or c == '_' for c in username):
        await update.message.reply_text("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞, ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶∏‡ßç‡¶ï‡ßã‡¶∞ (_) ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
        return

    if username in USERNAMES:
        await update.message.reply_text(f"‚ö†Ô∏è @{username} ‡¶Ü‡¶ó‡ßá‡¶á ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá‡•§")
    else:
        USERNAMES.append(username)
        save_usernames(USERNAMES)
        await update.message.reply_text(f"‚úÖ @{username} ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")

@admin_only
async def remove_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "‚ùå ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /remove babu123"
        )
        return

    username = context.args[0].lstrip("@")
    
    if username not in USERNAMES:
        await update.message.reply_text(f"‚ö†Ô∏è @{username} ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶®‡ßá‡¶á‡•§")
    else:
        USERNAMES.remove(username)
        save_usernames(USERNAMES)
        await update.message.reply_text(f"üóëÔ∏è @{username} ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá„ÄÇ")

@admin_only
async def list_usernames(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not USERNAMES:
        await update.message.reply_text("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶®‡ßá‡¶á‡•§ /add ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    usernames_list = "\n".join([f"üîπ @{username}" for username in USERNAMES])
    await update.message.reply_text(f"üìã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü:\n\n{usernames_list}")

# Callback handler
@admin_only
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "remove_all":
        if not USERNAMES:
            await query.edit_message_text("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶®‡ßá‡¶á‡•§")
            return
            
        # Show confirmation buttons
        keyboard = [
            [InlineKeyboardButton("‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", callback_data="confirm_remove_all")],
            [InlineKeyboardButton("‚ùå ‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="menu")]
        ]
        await query.edit_message_text(
            "‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶¨ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif query.data == "confirm_remove_all":
        USERNAMES.clear()
        save_usernames(USERNAMES)
        await query.edit_message_text("üóëÔ∏è ‡¶∏‡¶¨ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    
    elif query.data == "show_list":
        if not USERNAMES:
            await query.edit_message_text("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶®‡ßá‡¶á‡•§")
            return
            
        # Create a two-column layout for usernames
        keyboard = []
        for i in range(0, len(USERNAMES), 2):
            row_buttons = []
            # Add first username in this row
            if i < len(USERNAMES):
                row_buttons.append(InlineKeyboardButton(
                    f"üí¨ @{USERNAMES[i]}", 
                    url=f"https://t.me/{USERNAMES[i]}"
                ))
            # Add second username in this row if available
            if i+1 < len(USERNAMES):
                row_buttons.append(InlineKeyboardButton(
                    f"üí¨ @{USERNAMES[i+1]}", 
                    url=f"https://t.me/{USERNAMES[i+1]}"
                ))
            keyboard.append(row_buttons)
        
        # Add navigation buttons at the bottom
        keyboard.append([InlineKeyboardButton("üìã ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="menu")])
        
        await query.edit_message_text(
            "üìã ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ú‡¶®‡¶ï‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif query.data == "add_user":
        await query.edit_message_text(
            "‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá /add ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /add username\n\n"
            "‡¶¨‡¶æ ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="menu")]
            ])
        )
    
    elif query.data == "remove_user":
        await query.edit_message_text(
            "‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá /remove ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /remove username\n\n"
            "‡¶¨‡¶æ ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="menu")]
            ])
        )
    
    elif query.data == "menu":
        await show_main_menu(update, context)
    
    elif query.data == "send_message":
        if not USERNAMES:
            await query.edit_message_text("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶®‡ßá‡¶á‡•§ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶ó‡ßá‡•§")
            return
            
        await query.edit_message_text(
            "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ú‡¶®‡¶ï‡ßá ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü", callback_data="show_list")],
                [InlineKeyboardButton("üìã ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="menu")]
            ])
        )

# Main application
def main():
    app = Application.builder().token(TOKEN).build()

    # Add handlers
    handlers = [
        CommandHandler("start", start),
        CommandHandler("menu", show_main_menu),
        CommandHandler("add", add_username),
        CommandHandler("remove", remove_username),
        CommandHandler("list", list_usernames),
        CallbackQueryHandler(button_handler)
    ]
    
    for handler in handlers:
        app.add_handler(handler)

    print("‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá...")
    app.run_polling()

if __name__ == "__main__":
    main()
